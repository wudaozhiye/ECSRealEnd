
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by Tools.MacroExpansion, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepEngine                                          
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using Lockstep.Serialization;                                                                    
using System.Runtime.InteropServices;                                                            
using System.Runtime.CompilerServices;                                                            
using System;                                                                                    
using Lockstep.InternalUnsafeECS;                                                               
using System.Collections;                                                                        
using Lockstep.Math;                                                                             
using System.Collections.Generic;                                                                
using Lockstep.Logging;                                                                          
using Lockstep.Util;                                                                          
namespace Lockstep.UnsafeECS.Game {  
    using UnityEngine;
    public static unsafe class EntityViewUtil {
        public delegate BaseEntityView FuncOnBindView(Entity* ptr);

        public static BaseEntityView BindEntityView(Entity* ptr){
            var id = ptr->_ref._type;
            var func = _lutFuncOnBindView[id];
            if (func == null) {
                throw new IndexOutOfRangeException("TypeId out of Range:" + id);
            }
            return func(ptr);
        }
        public static bool HasView(Entity* ptr){
            var id = ptr->_ref._type;
            return _lutFuncOnBindView[id] != null;
        }

        public static FuncOnBindView[] _lutFuncOnBindView = new FuncOnBindView[] {
            null,
            _OnBindEntityViewPlayerCube,        
        };
        static BaseEntityView _OnBindEntityViewPlayerCube(Entity* ptr){
#if DEBUG
            var go = new GameObject(ptr->_localId + "PlayerCube");  
#else
            var go = new GameObject();   
#endif 
            var comp = go.AddComponent<EntityViewPlayerCube>();
            return comp;
        }    
    }


    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial class EntityViewPlayerCube :BaseEntityView {
        public static EntityViewPlayerCube Instance=>_Instance;
        private static EntityViewPlayerCube _Instance;
        [SerializeField] public PlayerCube _cloneEntity;
        private PlayerCube* _ptr;

        public override void DoUpdate(float deltaTime){
            _cloneEntity = *_ptr; 
            UpdatePosRot(ref _cloneEntity.Transform);
        }

        public override void BindEntity(Entity* entityPtr){
            if(entityPtr == null)  throw new Exception("BindViewError: EntityPtr should not be null");
            _ptr = (PlayerCube*)entityPtr;
            _cloneEntity = *_ptr;
            _Instance = this;
        }
        //protected override void UnbindEntity(){}
        public override void RebindEntity(Entity* newEntityPtr){}
    }  
}                                                                                
                                                                                         