
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by Tools.MacroExpansion, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepEngine                                          
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using Lockstep.Serialization;                                                                    
using System.Runtime.InteropServices;                                                            
using System.Runtime.CompilerServices;                                                            
using System;                                                                                    
using Lockstep.InternalUnsafeECS;                                                               
using System.Collections;                                                                        
using Lockstep.Math;                                                                             
using System.Collections.Generic;                                                                
using Lockstep.Logging;                                                                          
using Lockstep.Util;                                                                          
namespace Lockstep.UnsafeECS.Game {
    using Unity.Entities;
    using Unity.Mathematics;
    using UnityEngine;
    using Lockstep.Game;
    using Debug = Lockstep.Logging.Debug;
    public abstract unsafe partial class BaseUnityEntityService : BaseService,IEntityService {
        protected static Dictionary<int, Unity.Entities.Entity> _assetId2EntityPrefas =
            new Dictionary<int, Unity.Entities.Entity>();

        public static void RegisterUnityEntityPrefabs(List<EntityPrefabInfo> prefabs){
            _assetId2EntityPrefas.Clear();
            foreach (var prefab in prefabs) {
                if (_assetId2EntityPrefas.ContainsKey(prefab.AssetId)) {
                    Debug.LogError("Duplicate Prefab ID" + prefab.AssetId);
                }

                _assetId2EntityPrefas[prefab.AssetId] = prefab.Prefab;
            }

            Debug.Log("RegisterUnityEntityPrefabs ");
        }

        protected Dictionary<int, Unity.Entities.Entity> _id2UnityEntity = new Dictionary<int, Unity.Entities.Entity>();
        protected Dictionary<int, BaseEntityView> _id2EntityView = new Dictionary<int, BaseEntityView>();

        //private GameObject[] _prefabs;
        protected Unity.Entities.EntityManager _entityManager;
        public static GameViewConfig ViewConfig;

        public override void DoAwake(IServiceContainer services){
            ViewConfig = Resources.Load<GameViewConfig>(GameViewConfig.ResPath);
            _entityManager = Unity.Entities.World.All[0].EntityManager; //.GetOrCreateManager<EntityManager>();
        }


        public void OnEntityCreated(Context f, Lockstep.UnsafeECS.Entity* pEntity){
            if (pEntity == null) {
                Debug.LogError("OnEntityCreated null");
                return;
            }

            var pPrefab = EntityUtil.GetPrefab(pEntity);
            if (pPrefab == null) return;

            var assetId = pPrefab->AssetId;
            if (assetId == 0) return;
            Debug.Assert(_assetId2EntityPrefas.ContainsKey(assetId), "assetId" + assetId);
            var uEntity = _entityManager.Instantiate(_assetId2EntityPrefas[assetId]);
            _entityManager.AddComponentData(uEntity, pEntity->_ref);
            _id2UnityEntity[pEntity->LocalId] = uEntity;
            Transform3D* transform3D = EntityUtil.GetTransform3D(pEntity);
            if (transform3D != null) {
                _entityManager.SetComponentData(uEntity, new Unity.Transforms.LocalToWorld {
                    Value = float4x4.TRS(
                        transform3D->Position.ToVector3(),
                        quaternion.LookRotationSafe(transform3D->Forward.ToVector3(), Unity.Mathematics.math.up()),
                        new float3(1))
                });
            }

            if (!EntityViewUtil.HasView(pEntity)) {
                return;
            }

            //bind view
            Debug.Assert(!_id2EntityView.ContainsKey(pEntity->_localId));
            var view = EntityViewUtil.BindEntityView(pEntity);
            view.BindEntity(pEntity);
            view.OnBindEntity();
            _id2EntityView[pEntity->_localId] = view;
        }

        public void OnEntityDestroy(Context f, Lockstep.UnsafeECS.Entity* pEntity){
            if (_id2EntityView.TryGetValue(pEntity->LocalId, out var uView)) {
                // ReSharper disable once Unity.NoNullPropogation
                uView?.OnUnbindEntity();
                uView?.UnbindEntity();
                _id2EntityView.Remove(pEntity->LocalId);
            }
            if (_id2UnityEntity.TryGetValue(pEntity->LocalId, out var uEntity)) {
                _entityManager.DestroyEntity(uEntity);
                _id2UnityEntity.Remove(pEntity->LocalId);
            }
        }
        public virtual void OnPlayerCubeCreated(Context context, PlayerCube* entity){}
        public virtual void OnPlayerCubeDestroy(Context context, PlayerCube* entity){} 
    }
}                                                                                
                                                                                         