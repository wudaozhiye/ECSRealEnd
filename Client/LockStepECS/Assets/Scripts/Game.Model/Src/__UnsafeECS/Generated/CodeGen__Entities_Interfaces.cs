
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by Tools.MacroExpansion, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepEngine                                          
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using Lockstep.Serialization;                                                                    
using System.Runtime.InteropServices;                                                            
using System.Runtime.CompilerServices;                                                            
using System;                                                                                    
using Lockstep.InternalUnsafeECS;                                                               
using System.Collections;                                                                        
using Lockstep.Math;                                                                             
using System.Collections.Generic;                                                                
using Lockstep.Logging;                                                                          
using Lockstep.Util;  

namespace Lockstep.UnsafeECS.Game {  
    public unsafe partial class _EntityManager {
        internal NativeEntityArray<PlayerCube> _PlayerCubeAry; 
        internal unsafe void Alloc(){
            _PlayerCubeAry.Alloc((int)EEntityType.PlayerCube,PlayerCube.INIT_COUNT); 
        }
        internal unsafe void Free(){
            _PlayerCubeAry.Free(); 
        }
        internal _EntityManager Clone(){
            var ret = new _EntityManager();
            CopyTo(ret);
            return ret;
        }
        internal void CopyTo(_EntityManager dst){
            _PlayerCubeAry.CopyTo(ref dst._PlayerCubeAry); 
        }

        internal unsafe PlayerCube* CreateTempPlayerCube(Context context) {
            return _PlayerCubeAry.CreateTempEntity(context);
        }
        internal unsafe PlayerCube* GetTempPlayerCube(int idx) {
            return _PlayerCubeAry.GetTempEntity(idx);
        }
        internal unsafe void ClearTempPlayerCubeAry(){
            if (_PlayerCubeAry._WaitCreateCount > 0) {
                var len = _PlayerCubeAry._WaitCreateCount;
                var ptr = _PlayerCubeAry._WaitCreateAry.GetPointer(0);
                for(int i =0;i < len; ++i,++ptr){
                    *ptr = _DefaultDefine.PlayerCube;
                    ptr->_entity._ref._type = (int)EEntityType.PlayerCube;
                }
                _PlayerCubeAry._WaitCreateCount = 0;
            }
        } 

        internal NativeArray<int> GetAllAnimator_Pad(E_EntityOfAnimator entity){
            switch(entity){

            }
            return new NativeArray<int>();
        }
        internal NativeArray<CollisionShape> GetAllCollisionAgent_Collider(E_EntityOfCollisionAgent entity){
            switch(entity){

            }
            return new NativeArray<CollisionShape>();
        }
        internal NativeArray<bool> GetAllCollisionAgent_IsTrigger(E_EntityOfCollisionAgent entity){
            switch(entity){

            }
            return new NativeArray<bool>();
        }
        internal NativeArray<int> GetAllCollisionAgent_Layer(E_EntityOfCollisionAgent entity){
            switch(entity){

            }
            return new NativeArray<int>();
        }
        internal NativeArray<bool> GetAllCollisionAgent_IsEnable(E_EntityOfCollisionAgent entity){
            switch(entity){

            }
            return new NativeArray<bool>();
        }
        internal NativeArray<bool> GetAllCollisionAgent_IsSleep(E_EntityOfCollisionAgent entity){
            switch(entity){

            }
            return new NativeArray<bool>();
        }
        internal NativeArray<LFloat> GetAllCollisionAgent_Mass(E_EntityOfCollisionAgent entity){
            switch(entity){

            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllCollisionAgent_AngularSpeed(E_EntityOfCollisionAgent entity){
            switch(entity){

            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LVector3> GetAllCollisionAgent_Speed(E_EntityOfCollisionAgent entity){
            switch(entity){

            }
            return new NativeArray<LVector3>();
        }
        internal NativeArray<int> GetAllNavMeshAgent_Pad(E_EntityOfNavMeshAgent entity){
            switch(entity){

            }
            return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllPrefab_AssetId(E_EntityOfPrefab entity){
            switch(entity){
                case E_EntityOfPrefab.PlayerCube: return _GetAllPlayerCube_Prefab<int>(_GetOffsetOfPrefab_AssetId()); break;
            }
            return new NativeArray<int>();
        }
        internal NativeArray<LVector2> GetAllTransform2D_Position(E_EntityOfTransform2D entity){
            switch(entity){

            }
            return new NativeArray<LVector2>();
        }
        internal NativeArray<LFloat> GetAllTransform2D_Deg(E_EntityOfTransform2D entity){
            switch(entity){

            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllTransform2D_Scale(E_EntityOfTransform2D entity){
            switch(entity){

            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LVector3> GetAllTransform3D_Position(E_EntityOfTransform3D entity){
            switch(entity){
                case E_EntityOfTransform3D.PlayerCube: return _GetAllPlayerCube_Transform3D<LVector3>(_GetOffsetOfTransform3D_Position()); break;
            }
            return new NativeArray<LVector3>();
        }
        internal NativeArray<LVector3> GetAllTransform3D_Forward(E_EntityOfTransform3D entity){
            switch(entity){
                case E_EntityOfTransform3D.PlayerCube: return _GetAllPlayerCube_Transform3D<LVector3>(_GetOffsetOfTransform3D_Forward()); break;
            }
            return new NativeArray<LVector3>();
        }
        internal NativeArray<LFloat> GetAllTransform3D_Scale(E_EntityOfTransform3D entity){
            switch(entity){
                case E_EntityOfTransform3D.PlayerCube: return _GetAllPlayerCube_Transform3D<LFloat>(_GetOffsetOfTransform3D_Scale()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<int> GetAllPlayerCubeTag_Pad(E_EntityOfPlayerCubeTag entity){
            switch(entity){
                case E_EntityOfPlayerCubeTag.PlayerCube: return _GetAllPlayerCube_PlayerCubeTag<int>(_GetOffsetOfPlayerCubeTag_Pad()); break;
            }
            return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllAssetData_AssetId(E_EntityOfAssetData entity){
            switch(entity){

            }
            return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllPlayerData_Score(E_EntityOfPlayerData entity){
            switch(entity){
                case E_EntityOfPlayerData.PlayerCube: return _GetAllPlayerCube_PlayerData<int>(_GetOffsetOfPlayerData_Score()); break;
            }
            return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllPlayerData_LocalId(E_EntityOfPlayerData entity){
            switch(entity){
                case E_EntityOfPlayerData.PlayerCube: return _GetAllPlayerCube_PlayerData<int>(_GetOffsetOfPlayerData_LocalId()); break;
            }
            return new NativeArray<int>();
        }
        internal NativeArray<LFloat> GetAllMoveData_MoveSpd(E_EntityOfMoveData entity){
            switch(entity){
                case E_EntityOfMoveData.PlayerCube: return _GetAllPlayerCube_MoveData<LFloat>(_GetOffsetOfMoveData_MoveSpd()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllMoveData_AcceleratedSpd(E_EntityOfMoveData entity){
            switch(entity){
                case E_EntityOfMoveData.PlayerCube: return _GetAllPlayerCube_MoveData<LFloat>(_GetOffsetOfMoveData_AcceleratedSpd()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllMoveData_CurSpd(E_EntityOfMoveData entity){
            switch(entity){
                case E_EntityOfMoveData.PlayerCube: return _GetAllPlayerCube_MoveData<LFloat>(_GetOffsetOfMoveData_CurSpd()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllMoveData_AngularSpd(E_EntityOfMoveData entity){
            switch(entity){
                case E_EntityOfMoveData.PlayerCube: return _GetAllPlayerCube_MoveData<LFloat>(_GetOffsetOfMoveData_AngularSpd()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllMoveData_DeltaDeg(E_EntityOfMoveData entity){
            switch(entity){
                case E_EntityOfMoveData.PlayerCube: return _GetAllPlayerCube_MoveData<LFloat>(_GetOffsetOfMoveData_DeltaDeg()); break;
            }
            return new NativeArray<LFloat>();
        }

        internal NativeArray<int> GetAllAnimator_Pad(E_EntityOfAnimator entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<CollisionShape> GetAllCollisionAgent_Collider(E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<CollisionShape>();
        }
        internal NativeArray<bool> GetAllCollisionAgent_IsTrigger(E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<bool>();
        }
        internal NativeArray<int> GetAllCollisionAgent_Layer(E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<bool> GetAllCollisionAgent_IsEnable(E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<bool>();
        }
        internal NativeArray<bool> GetAllCollisionAgent_IsSleep(E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<bool>();
        }
        internal NativeArray<LFloat> GetAllCollisionAgent_Mass(E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllCollisionAgent_AngularSpeed(E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LVector3> GetAllCollisionAgent_Speed(E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<LVector3>();
        }
        internal NativeArray<int> GetAllNavMeshAgent_Pad(E_EntityOfNavMeshAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllPrefab_AssetId(E_EntityOfPrefab entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfPrefab.PlayerCube: return _GetAllPlayerCube_Prefab<int>(_GetOffsetOfPrefab_AssetId(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<LVector2> GetAllTransform2D_Position(E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<LVector2>();
        }
        internal NativeArray<LFloat> GetAllTransform2D_Deg(E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllTransform2D_Scale(E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LVector3> GetAllTransform3D_Position(E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfTransform3D.PlayerCube: return _GetAllPlayerCube_Transform3D<LVector3>(_GetOffsetOfTransform3D_Position(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LVector3>();
        }
        internal NativeArray<LVector3> GetAllTransform3D_Forward(E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfTransform3D.PlayerCube: return _GetAllPlayerCube_Transform3D<LVector3>(_GetOffsetOfTransform3D_Forward(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LVector3>();
        }
        internal NativeArray<LFloat> GetAllTransform3D_Scale(E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfTransform3D.PlayerCube: return _GetAllPlayerCube_Transform3D<LFloat>(_GetOffsetOfTransform3D_Scale(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<int> GetAllPlayerCubeTag_Pad(E_EntityOfPlayerCubeTag entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfPlayerCubeTag.PlayerCube: return _GetAllPlayerCube_PlayerCubeTag<int>(_GetOffsetOfPlayerCubeTag_Pad(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllAssetData_AssetId(E_EntityOfAssetData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllPlayerData_Score(E_EntityOfPlayerData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfPlayerData.PlayerCube: return _GetAllPlayerCube_PlayerData<int>(_GetOffsetOfPlayerData_Score(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllPlayerData_LocalId(E_EntityOfPlayerData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfPlayerData.PlayerCube: return _GetAllPlayerCube_PlayerData<int>(_GetOffsetOfPlayerData_LocalId(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<LFloat> GetAllMoveData_MoveSpd(E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfMoveData.PlayerCube: return _GetAllPlayerCube_MoveData<LFloat>(_GetOffsetOfMoveData_MoveSpd(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllMoveData_AcceleratedSpd(E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfMoveData.PlayerCube: return _GetAllPlayerCube_MoveData<LFloat>(_GetOffsetOfMoveData_AcceleratedSpd(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllMoveData_CurSpd(E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfMoveData.PlayerCube: return _GetAllPlayerCube_MoveData<LFloat>(_GetOffsetOfMoveData_CurSpd(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllMoveData_AngularSpd(E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfMoveData.PlayerCube: return _GetAllPlayerCube_MoveData<LFloat>(_GetOffsetOfMoveData_AngularSpd(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllMoveData_DeltaDeg(E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfMoveData.PlayerCube: return _GetAllPlayerCube_MoveData<LFloat>(_GetOffsetOfMoveData_DeltaDeg(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }

        internal NativeArray<Animator> GetAllAnimator(E_EntityOfAnimator entity){
            switch(entity){

            }
            return new NativeArray<Animator>();
        }
        internal NativeArray<CollisionAgent> GetAllCollisionAgent(E_EntityOfCollisionAgent entity){
            switch(entity){

            }
            return new NativeArray<CollisionAgent>();
        }
        internal NativeArray<NavMeshAgent> GetAllNavMeshAgent(E_EntityOfNavMeshAgent entity){
            switch(entity){

            }
            return new NativeArray<NavMeshAgent>();
        }
        internal NativeArray<Prefab> GetAllPrefab(E_EntityOfPrefab entity){
            switch(entity){
                case E_EntityOfPrefab.PlayerCube: return _GetAllPlayerCube_Prefab<Prefab>(0); break;
            }
            return new NativeArray<Prefab>();
        }
        internal NativeArray<Transform2D> GetAllTransform2D(E_EntityOfTransform2D entity){
            switch(entity){

            }
            return new NativeArray<Transform2D>();
        }
        internal NativeArray<Transform3D> GetAllTransform3D(E_EntityOfTransform3D entity){
            switch(entity){
                case E_EntityOfTransform3D.PlayerCube: return _GetAllPlayerCube_Transform3D<Transform3D>(0); break;
            }
            return new NativeArray<Transform3D>();
        }
        internal NativeArray<PlayerCubeTag> GetAllPlayerCubeTag(E_EntityOfPlayerCubeTag entity){
            switch(entity){
                case E_EntityOfPlayerCubeTag.PlayerCube: return _GetAllPlayerCube_PlayerCubeTag<PlayerCubeTag>(0); break;
            }
            return new NativeArray<PlayerCubeTag>();
        }
        internal NativeArray<AssetData> GetAllAssetData(E_EntityOfAssetData entity){
            switch(entity){

            }
            return new NativeArray<AssetData>();
        }
        internal NativeArray<PlayerData> GetAllPlayerData(E_EntityOfPlayerData entity){
            switch(entity){
                case E_EntityOfPlayerData.PlayerCube: return _GetAllPlayerCube_PlayerData<PlayerData>(0); break;
            }
            return new NativeArray<PlayerData>();
        }
        internal NativeArray<MoveData> GetAllMoveData(E_EntityOfMoveData entity){
            switch(entity){
                case E_EntityOfMoveData.PlayerCube: return _GetAllPlayerCube_MoveData<MoveData>(0); break;
            }
            return new NativeArray<MoveData>();
        }



        internal NativeArray<Animator> GetAllAnimator(E_EntityOfAnimator entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;
            return new NativeArray<Animator>();
        }
        internal NativeArray<CollisionAgent> GetAllCollisionAgent(E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;
            return new NativeArray<CollisionAgent>();
        }
        internal NativeArray<NavMeshAgent> GetAllNavMeshAgent(E_EntityOfNavMeshAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;
            return new NativeArray<NavMeshAgent>();
        }
        internal NativeArray<Prefab> GetAllPrefab(E_EntityOfPrefab entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfPrefab.PlayerCube: return _GetAllPlayerCube_Prefab<Prefab>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<Prefab>();
        }
        internal NativeArray<Transform2D> GetAllTransform2D(E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;
            return new NativeArray<Transform2D>();
        }
        internal NativeArray<Transform3D> GetAllTransform3D(E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfTransform3D.PlayerCube: return _GetAllPlayerCube_Transform3D<Transform3D>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<Transform3D>();
        }
        internal NativeArray<PlayerCubeTag> GetAllPlayerCubeTag(E_EntityOfPlayerCubeTag entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfPlayerCubeTag.PlayerCube: return _GetAllPlayerCube_PlayerCubeTag<PlayerCubeTag>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<PlayerCubeTag>();
        }
        internal NativeArray<AssetData> GetAllAssetData(E_EntityOfAssetData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;
            return new NativeArray<AssetData>();
        }
        internal NativeArray<PlayerData> GetAllPlayerData(E_EntityOfPlayerData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfPlayerData.PlayerCube: return _GetAllPlayerCube_PlayerData<PlayerData>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<PlayerData>();
        }
        internal NativeArray<MoveData> GetAllMoveData(E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfMoveData.PlayerCube: return _GetAllPlayerCube_MoveData<MoveData>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<MoveData>();
        }


        internal int CurPlayerCubeCount => _PlayerCubeAry.CurEntityCount;
        internal int MaxPlayerCubeIndex => _PlayerCubeAry.Length - 1;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal unsafe PlayerCube* GetPlayerCube(int index) { return _PlayerCubeAry.GetEntity(index); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal unsafe PlayerCube* GetPlayerCube(EntityRef entityRef){
            var ptr = _PlayerCubeAry.GetEntity(entityRef._index);
            if (ptr->EntityRef != entityRef) return null;
            return ptr;
        }  

    }
}                                                                                
                                                                                         