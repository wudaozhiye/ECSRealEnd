
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by Tools.MacroExpansion, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepEngine                                          
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using Lockstep.Serialization;                                                                    
using System.Runtime.InteropServices;                                                            
using System.Runtime.CompilerServices;                                                            
using System;                                                                                    
using Lockstep.InternalUnsafeECS;                                                               
using System.Collections;                                                                        
using Lockstep.Math;                                                                             
using System.Collections.Generic;                                                                
using Lockstep.Logging;                                                                          
using Lockstep.Util;                                                                          
namespace Lockstep.UnsafeECS.Game {
    using Lockstep.Game;
    public partial class Context {
        protected Context _context; 
        protected IRandomService _randomService;   
        protected ITimeMachineService _timeMachineService;   
        protected IGlobalStateService _globalStateService;   
        protected IViewService _viewService;   
        protected IAudioService _audioService;   
        protected IInputService _inputService;   
        protected IMap2DService _map2DService;   
        protected IResService _resService;   
        protected IEffectService _effectService;   
        protected IEventRegisterService _eventRegisterService;   
        protected IIdService _idService;   
        protected IDebugService _debugService;      
        protected IGameStateService _gameStateService;   
        protected IGameConfigService _gameConfigService;   
        protected IGameEventService _gameEventService;    
        protected override void OnInit(BaseContext context, IServiceContainer services){
            _context =  (Context) context;
            //BuildInServices
            _randomService = services.GetService<IRandomService>();
            _timeMachineService = services.GetService<ITimeMachineService>();
            _globalStateService = services.GetService<IGlobalStateService>();
            _viewService = services.GetService<IViewService>();
            _audioService = services.GetService<IAudioService>();
            _inputService = services.GetService<IInputService>();
            _map2DService = services.GetService<IMap2DService>();
            _resService = services.GetService<IResService>();
            _effectService = services.GetService<IEffectService>();
            _eventRegisterService = services.GetService<IEventRegisterService>();
            _idService = services.GetService<IIdService>();
            _debugService = services.GetService<IDebugService>(); 
            //GameServices
            _gameStateService = services.GetService<IGameStateService>();
            _gameConfigService = services.GetService<IGameConfigService>();
            _gameEventService = services.GetService<IGameEventService>(); 
        }
    }
    public partial class GameBaseSystem {
        protected Context _context; 
        protected IRandomService _randomService;   
        protected ITimeMachineService _timeMachineService;   
        protected IGlobalStateService _globalStateService;   
        protected IViewService _viewService;   
        protected IAudioService _audioService;   
        protected IInputService _inputService;   
        protected IMap2DService _map2DService;   
        protected IResService _resService;   
        protected IEffectService _effectService;   
        protected IEventRegisterService _eventRegisterService;   
        protected IIdService _idService;   
        protected IDebugService _debugService;      
        protected IGameStateService _gameStateService;   
        protected IGameConfigService _gameConfigService;   
        protected IGameEventService _gameEventService;

        protected override void OnInit(BaseContext context, IServiceContainer services)
        {
            base.OnInit(context, services);
            _context =  (Context) context;
            //BuildInServices
            _randomService = services.GetService<IRandomService>();
            _timeMachineService = services.GetService<ITimeMachineService>();
            _globalStateService = services.GetService<IGlobalStateService>();
            _viewService = services.GetService<IViewService>();
            _audioService = services.GetService<IAudioService>();
            _inputService = services.GetService<IInputService>();
            _map2DService = services.GetService<IMap2DService>();
            _resService = services.GetService<IResService>();
            _effectService = services.GetService<IEffectService>();
            _eventRegisterService = services.GetService<IEventRegisterService>();
            _idService = services.GetService<IIdService>();
            _debugService = services.GetService<IDebugService>(); 
            //GameServices
            _gameStateService = services.GetService<IGameStateService>();
            _gameConfigService = services.GetService<IGameConfigService>();
            _gameEventService = services.GetService<IGameEventService>(); 
        }

       
    }
    public partial class GameJobSystem {
        protected Context _context; 
        protected IRandomService _randomService;   
        protected ITimeMachineService _timeMachineService;   
        protected IGlobalStateService _globalStateService;   
        protected IViewService _viewService;   
        protected IAudioService _audioService;   
        protected IInputService _inputService;   
        protected IMap2DService _map2DService;   
        protected IResService _resService;   
        protected IEffectService _effectService;   
        protected IEventRegisterService _eventRegisterService;   
        protected IIdService _idService;   
        protected IDebugService _debugService;      
        protected IGameStateService _gameStateService;   
        protected IGameConfigService _gameConfigService;   
        protected IGameEventService _gameEventService;    
        protected override void OnInit(BaseContext context, IServiceContainer services){
            _context =  (Context) context;
            //BuildInServices
            _randomService = services.GetService<IRandomService>();
            _timeMachineService = services.GetService<ITimeMachineService>();
            _globalStateService = services.GetService<IGlobalStateService>();
            _viewService = services.GetService<IViewService>();
            _audioService = services.GetService<IAudioService>();
            _inputService = services.GetService<IInputService>();
            _map2DService = services.GetService<IMap2DService>();
            _resService = services.GetService<IResService>();
            _effectService = services.GetService<IEffectService>();
            _eventRegisterService = services.GetService<IEventRegisterService>();
            _idService = services.GetService<IIdService>();
            _debugService = services.GetService<IDebugService>(); 
            //GameServices
            _gameStateService = services.GetService<IGameStateService>();
            _gameConfigService = services.GetService<IGameConfigService>();
            _gameEventService = services.GetService<IGameEventService>(); 
        }
    }
    public partial class GameExecuteSystem {
        protected Context _context; 
        protected IRandomService _randomService;   
        protected ITimeMachineService _timeMachineService;   
        protected IGlobalStateService _globalStateService;   
        protected IViewService _viewService;   
        protected IAudioService _audioService;   
        protected IInputService _inputService;   
        protected IMap2DService _map2DService;   
        protected IResService _resService;   
        protected IEffectService _effectService;   
        protected IEventRegisterService _eventRegisterService;   
        protected IIdService _idService;   
        protected IDebugService _debugService;      
        protected IGameStateService _gameStateService;   
        protected IGameConfigService _gameConfigService;   
        protected IGameEventService _gameEventService;    
        protected override void OnInit(BaseContext context, IServiceContainer services){
            _context =  (Context) context;
            //BuildInServices
            _randomService = services.GetService<IRandomService>();
            _timeMachineService = services.GetService<ITimeMachineService>();
            _globalStateService = services.GetService<IGlobalStateService>();
            _viewService = services.GetService<IViewService>();
            _audioService = services.GetService<IAudioService>();
            _inputService = services.GetService<IInputService>();
            _map2DService = services.GetService<IMap2DService>();
            _resService = services.GetService<IResService>();
            _effectService = services.GetService<IEffectService>();
            _eventRegisterService = services.GetService<IEventRegisterService>();
            _idService = services.GetService<IIdService>();
            _debugService = services.GetService<IDebugService>(); 
            //GameServices
            _gameStateService = services.GetService<IGameStateService>();
            _gameConfigService = services.GetService<IGameConfigService>();
            _gameEventService = services.GetService<IGameEventService>(); 
        }
    } 
}                                                                                
                                                                                         