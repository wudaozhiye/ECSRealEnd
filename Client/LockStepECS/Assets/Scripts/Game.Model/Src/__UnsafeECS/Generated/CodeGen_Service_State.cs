
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by Tools.MacroExpansion, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepEngine                                          
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using Lockstep.Serialization;                                                                    
using System.Runtime.InteropServices;                                                            
using System.Runtime.CompilerServices;                                                            
using System;                                                                                    
using Lockstep.InternalUnsafeECS;                                                               
using System.Collections;                                                                        
using Lockstep.Math;                                                                             
using System.Collections.Generic;                                                                
using Lockstep.Logging;                                                                          
using Lockstep.Util;                                                                          
namespace Lockstep.Game {    
		using NetMsg.Common;
		using Lockstep.UnsafeECS;
		using Lockstep.UnsafeECS.Game;
		public partial interface IGameStateService : IService  { 
        	bool IsPlaying{get; set; }   
        	bool IsGameOver{get; set; }   
        	byte LocalEntityId{get; set; }   
        	int CurScore{get; set; }                                                                                                    
	    }    

    	public partial class GameStateService  {    
		    public static GameStateService Instance { get; private set; }
		    public GameStateService(){Instance = this;}
		}
		public partial interface IGameConfigService : IService  { 
        	string RelPath{get; set; }   
        	string RecorderFilePath{get; set; }   
        	string DumpStrPath{get; set; }   
        	int MaxPlayerCount{get; set; }   
        	CollisionConfig CollisionConfig{get; set; }   
        	Msg_G2C_GameStartInfo ClientModeInfo{get; set; }   
        	List<ConfigPlayerInfo> PlayerInfos{get; set; }                                                                                                    
	    }    

    	public partial class GameConfigService  {    
		    public static GameConfigService Instance { get; private set; }
		    public GameConfigService(){Instance = this;}
		} 

        public partial class GameStateService :IGameStateService {    
		    private StructBackupHelper<_State> _globalBackuper = new StructBackupHelper<_State>();                                                                            
	        private _State _curState;     
	        public override void Backup(int tick){
		        _globalBackuper.Value = _curState;
		        _globalBackuper.Backup(tick);
	        }

	        public override void RollbackTo(int tick){
		        _globalBackuper.RollbackTo(tick, 0, false);
		        _curState = _globalBackuper.Value;
	        }
	        public override void Clean(int checkedTick){
		        _globalBackuper.CleanUselessSnapshot(checkedTick);
	        }
		    public struct _State {   
				public bool IsPlaying;
				public bool IsGameOver;
				public byte LocalEntityId;
				public int CurScore;                                                                                                
	        }  
	        public bool IsPlaying {get => _curState.IsPlaying;set => _curState.IsPlaying = value;}
	        public bool IsGameOver {get => _curState.IsGameOver;set => _curState.IsGameOver = value;}
	        public byte LocalEntityId {get => _curState.LocalEntityId;set => _curState.LocalEntityId = value;}
	        public int CurScore {get => _curState.CurScore;set => _curState.CurScore = value;}                                                                                                
  
	    } 

	    public partial class GameConfigService :IGameConfigService  {     
	        public string RelPath {get => _curState.RelPath;set => _curState.RelPath = value;}
	        public string RecorderFilePath {get => _curState.RecorderFilePath;set => _curState.RecorderFilePath = value;}
	        public string DumpStrPath {get => _curState.DumpStrPath;set => _curState.DumpStrPath = value;}
	        public int MaxPlayerCount {get => _curState.MaxPlayerCount;set => _curState.MaxPlayerCount = value;}
	        public CollisionConfig CollisionConfig {get => _curState.CollisionConfig;set => _curState.CollisionConfig = value;}
	        public Msg_G2C_GameStartInfo ClientModeInfo {get => _curState.ClientModeInfo;set => _curState.ClientModeInfo = value;}
	        public List<ConfigPlayerInfo> PlayerInfos {get => _curState.PlayerInfos;set => _curState.PlayerInfos = value;}  
	    }
	    public partial class GameConfig  {    
			public string RelPath;
			public string RecorderFilePath;
			public string DumpStrPath;
			public int MaxPlayerCount;
			public CollisionConfig CollisionConfig;
			public Msg_G2C_GameStartInfo ClientModeInfo;
			public List<ConfigPlayerInfo> PlayerInfos;  
	    } 
}
                                                                                
                                                                                         