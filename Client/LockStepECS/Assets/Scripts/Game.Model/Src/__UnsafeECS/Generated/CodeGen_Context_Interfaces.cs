
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by Tools.MacroExpansion, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepEngine                                          
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using Lockstep.Serialization;                                                                    
using System.Runtime.InteropServices;                                                            
using System.Runtime.CompilerServices;                                                            
using System;                                                                                    
using Lockstep.InternalUnsafeECS;                                                               
using System.Collections;                                                                        
using Lockstep.Math;                                                                             
using System.Collections.Generic;                                                                
using Lockstep.Logging;                                                                          
using Lockstep.Util;                                                                          
namespace Lockstep.UnsafeECS.Game {  
    using Lockstep.Game;
    public unsafe partial class Context : BaseContext {
        public int CurTotalEntityCount => _entities.CurTotalEntityCount;
        public int CurPlayerCubeCount => _entities.CurPlayerCubeCount;
        public int MaxPlayerCubeIndex => _entities.MaxPlayerCubeIndex;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe PlayerCube* GetPlayerCube(int index) { return _entities.GetPlayerCube(index); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe PlayerCube* GetPlayerCube(EntityRef entityRef) {  return _entities.GetPlayerCube(entityRef); } 

    #region GetComponetFilter
        public void GetAllPlayerCube_Transform(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<Transform3D> compArray, FuncEntityFilter<PlayerCube> filterFunc){
            _FilterEntity(allocatorType,_entities._PlayerCubeAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Transform); } });
        }
        public void GetAllPlayerCube_Prefab(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<Prefab> compArray, FuncEntityFilter<PlayerCube> filterFunc){
            _FilterEntity(allocatorType,_entities._PlayerCubeAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Prefab); } });
        }
        public void GetAllPlayerCube_Move(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<MoveData> compArray, FuncEntityFilter<PlayerCube> filterFunc){
            _FilterEntity(allocatorType,_entities._PlayerCubeAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Move); } });
        }
        public void GetAllPlayerCube_Player(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<PlayerData> compArray, FuncEntityFilter<PlayerCube> filterFunc){
            _FilterEntity(allocatorType,_entities._PlayerCubeAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Player); } });
        }
        public void GetAllPlayerCube_Tag(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<PlayerCubeTag> compArray, FuncEntityFilter<PlayerCube> filterFunc){
            _FilterEntity(allocatorType,_entities._PlayerCubeAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Tag); } });
        }   
        public NativeArray<Animator> GetAllAnimator(EAllocatorType allocatorType,E_EntityOfAnimator entity){ var val = _entities.GetAllAnimator(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<Animator> GetAllAnimator(EAllocatorType allocatorType,E_EntityOfAnimator entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAnimator(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<CollisionAgent> GetAllCollisionAgent(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){ var val = _entities.GetAllCollisionAgent(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<CollisionAgent> GetAllCollisionAgent(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<NavMeshAgent> GetAllNavMeshAgent(EAllocatorType allocatorType,E_EntityOfNavMeshAgent entity){ var val = _entities.GetAllNavMeshAgent(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<NavMeshAgent> GetAllNavMeshAgent(EAllocatorType allocatorType,E_EntityOfNavMeshAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllNavMeshAgent(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<Prefab> GetAllPrefab(EAllocatorType allocatorType,E_EntityOfPrefab entity){ var val = _entities.GetAllPrefab(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<Prefab> GetAllPrefab(EAllocatorType allocatorType,E_EntityOfPrefab entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllPrefab(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<Transform2D> GetAllTransform2D(EAllocatorType allocatorType,E_EntityOfTransform2D entity){ var val = _entities.GetAllTransform2D(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<Transform2D> GetAllTransform2D(EAllocatorType allocatorType,E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform2D(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<Transform3D> GetAllTransform3D(EAllocatorType allocatorType,E_EntityOfTransform3D entity){ var val = _entities.GetAllTransform3D(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<Transform3D> GetAllTransform3D(EAllocatorType allocatorType,E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform3D(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<PlayerCubeTag> GetAllPlayerCubeTag(EAllocatorType allocatorType,E_EntityOfPlayerCubeTag entity){ var val = _entities.GetAllPlayerCubeTag(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<PlayerCubeTag> GetAllPlayerCubeTag(EAllocatorType allocatorType,E_EntityOfPlayerCubeTag entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllPlayerCubeTag(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<AssetData> GetAllAssetData(EAllocatorType allocatorType,E_EntityOfAssetData entity){ var val = _entities.GetAllAssetData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<AssetData> GetAllAssetData(EAllocatorType allocatorType,E_EntityOfAssetData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAssetData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<PlayerData> GetAllPlayerData(EAllocatorType allocatorType,E_EntityOfPlayerData entity){ var val = _entities.GetAllPlayerData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<PlayerData> GetAllPlayerData(EAllocatorType allocatorType,E_EntityOfPlayerData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllPlayerData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<MoveData> GetAllMoveData(EAllocatorType allocatorType,E_EntityOfMoveData entity){ var val = _entities.GetAllMoveData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<MoveData> GetAllMoveData(EAllocatorType allocatorType,E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllMoveData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}

        public NativeArray<int> GetAllAnimator_Pad(EAllocatorType allocatorType,E_EntityOfAnimator entity){var val = _entities.GetAllAnimator_Pad(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllAnimator_Pad(EAllocatorType allocatorType,E_EntityOfAnimator entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAnimator_Pad(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<CollisionShape> GetAllCollisionAgent_Collider(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_Collider(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<CollisionShape> GetAllCollisionAgent_Collider(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_Collider(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllCollisionAgent_IsTrigger(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_IsTrigger(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllCollisionAgent_IsTrigger(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_IsTrigger(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllCollisionAgent_Layer(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_Layer(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllCollisionAgent_Layer(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_Layer(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllCollisionAgent_IsEnable(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_IsEnable(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllCollisionAgent_IsEnable(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_IsEnable(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllCollisionAgent_IsSleep(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_IsSleep(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllCollisionAgent_IsSleep(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_IsSleep(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllCollisionAgent_Mass(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_Mass(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllCollisionAgent_Mass(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_Mass(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllCollisionAgent_AngularSpeed(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_AngularSpeed(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllCollisionAgent_AngularSpeed(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_AngularSpeed(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllCollisionAgent_Speed(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_Speed(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllCollisionAgent_Speed(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_Speed(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllNavMeshAgent_Pad(EAllocatorType allocatorType,E_EntityOfNavMeshAgent entity){var val = _entities.GetAllNavMeshAgent_Pad(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllNavMeshAgent_Pad(EAllocatorType allocatorType,E_EntityOfNavMeshAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllNavMeshAgent_Pad(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllPrefab_AssetId(EAllocatorType allocatorType,E_EntityOfPrefab entity){var val = _entities.GetAllPrefab_AssetId(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllPrefab_AssetId(EAllocatorType allocatorType,E_EntityOfPrefab entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllPrefab_AssetId(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector2> GetAllTransform2D_Position(EAllocatorType allocatorType,E_EntityOfTransform2D entity){var val = _entities.GetAllTransform2D_Position(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector2> GetAllTransform2D_Position(EAllocatorType allocatorType,E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform2D_Position(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllTransform2D_Deg(EAllocatorType allocatorType,E_EntityOfTransform2D entity){var val = _entities.GetAllTransform2D_Deg(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllTransform2D_Deg(EAllocatorType allocatorType,E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform2D_Deg(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllTransform2D_Scale(EAllocatorType allocatorType,E_EntityOfTransform2D entity){var val = _entities.GetAllTransform2D_Scale(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllTransform2D_Scale(EAllocatorType allocatorType,E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform2D_Scale(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllTransform3D_Position(EAllocatorType allocatorType,E_EntityOfTransform3D entity){var val = _entities.GetAllTransform3D_Position(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllTransform3D_Position(EAllocatorType allocatorType,E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform3D_Position(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllTransform3D_Forward(EAllocatorType allocatorType,E_EntityOfTransform3D entity){var val = _entities.GetAllTransform3D_Forward(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllTransform3D_Forward(EAllocatorType allocatorType,E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform3D_Forward(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllTransform3D_Scale(EAllocatorType allocatorType,E_EntityOfTransform3D entity){var val = _entities.GetAllTransform3D_Scale(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllTransform3D_Scale(EAllocatorType allocatorType,E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform3D_Scale(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllPlayerCubeTag_Pad(EAllocatorType allocatorType,E_EntityOfPlayerCubeTag entity){var val = _entities.GetAllPlayerCubeTag_Pad(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllPlayerCubeTag_Pad(EAllocatorType allocatorType,E_EntityOfPlayerCubeTag entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllPlayerCubeTag_Pad(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllAssetData_AssetId(EAllocatorType allocatorType,E_EntityOfAssetData entity){var val = _entities.GetAllAssetData_AssetId(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllAssetData_AssetId(EAllocatorType allocatorType,E_EntityOfAssetData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAssetData_AssetId(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllPlayerData_Score(EAllocatorType allocatorType,E_EntityOfPlayerData entity){var val = _entities.GetAllPlayerData_Score(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllPlayerData_Score(EAllocatorType allocatorType,E_EntityOfPlayerData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllPlayerData_Score(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllPlayerData_LocalId(EAllocatorType allocatorType,E_EntityOfPlayerData entity){var val = _entities.GetAllPlayerData_LocalId(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllPlayerData_LocalId(EAllocatorType allocatorType,E_EntityOfPlayerData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllPlayerData_LocalId(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_MoveSpd(EAllocatorType allocatorType,E_EntityOfMoveData entity){var val = _entities.GetAllMoveData_MoveSpd(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_MoveSpd(EAllocatorType allocatorType,E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllMoveData_MoveSpd(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_AcceleratedSpd(EAllocatorType allocatorType,E_EntityOfMoveData entity){var val = _entities.GetAllMoveData_AcceleratedSpd(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_AcceleratedSpd(EAllocatorType allocatorType,E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllMoveData_AcceleratedSpd(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_CurSpd(EAllocatorType allocatorType,E_EntityOfMoveData entity){var val = _entities.GetAllMoveData_CurSpd(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_CurSpd(EAllocatorType allocatorType,E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllMoveData_CurSpd(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_AngularSpd(EAllocatorType allocatorType,E_EntityOfMoveData entity){var val = _entities.GetAllMoveData_AngularSpd(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_AngularSpd(EAllocatorType allocatorType,E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllMoveData_AngularSpd(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_DeltaDeg(EAllocatorType allocatorType,E_EntityOfMoveData entity){var val = _entities.GetAllMoveData_DeltaDeg(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_DeltaDeg(EAllocatorType allocatorType,E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllMoveData_DeltaDeg(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
 
    #endregion

    }
}                                                                                
                                                                                         